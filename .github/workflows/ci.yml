name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Test backend with pytest
      run: |
        cd backend
        python -c "
        import sys
        import os
        sys.path.append(os.getcwd())
        
        # Basic import tests
        try:
            from main import app
            print('✓ FastAPI app imports successfully')
        except Exception as e:
            print(f'✗ FastAPI import failed: {e}')
            sys.exit(1)
        
        try:
            from models import ProductTranslation
            print('✓ Pydantic models import successfully')
        except Exception as e:
            print(f'✗ Models import failed: {e}')
            sys.exit(1)
        
        try:
            from database import init_database
            print('✓ Database module imports successfully')
        except Exception as e:
            print(f'✗ Database import failed: {e}')
            sys.exit(1)
        
        print('All backend imports successful!')
        "

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-frontend-${{ hashFiles('frontend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-frontend-
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test frontend imports
      run: |
        cd frontend
        python -c "
        import streamlit as st
        print('✓ Streamlit imports successfully')
        
        import sys
        import os
        sys.path.append('../backend')
        
        try:
            import requests
            print('✓ Requests library available')
        except Exception as e:
            print(f'✗ Requests import failed: {e}')
        
        print('Frontend environment ready!')
        "

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Test Docker build - Backend
      run: |
        cd backend
        docker build -t bharat-ml-backend .
    
    - name: Test Docker build - Frontend
      run: |
        cd frontend
        docker build -t bharat-ml-frontend .
    
    - name: Test Docker Compose
      run: |
        # Create minimal test environment
        echo "BACKEND_URL=http://backend:8000" > .env
        echo "DATABASE_URL=sqlite:///./translations.db" >> .env
        
        # Test docker-compose syntax
        docker-compose config

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
    
    - name: Check code formatting with Black
      run: |
        black --check --diff backend/ frontend/ || echo "Code formatting issues found (non-blocking)"
    
    - name: Lint with flake8
      run: |
        flake8 backend/ frontend/ --max-line-length=88 --extend-ignore=E203,W503 || echo "Linting issues found (non-blocking)"
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff backend/ frontend/ || echo "Import sorting issues found (non-blocking)"

  deployment-test:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, docker-build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Test deployment scripts
      run: |
        # Make scripts executable
        chmod +x setup.sh deploy_docker.sh start_demo.sh
        
        # Test script syntax
        bash -n setup.sh
        bash -n deploy_docker.sh  
        bash -n start_demo.sh
        
        echo "All deployment scripts have valid syntax"
    
    - name: Validate environment files
      run: |
        # Check that required environment files exist
        ls -la .env.example .env.production
        
        # Validate environment file format
        grep -E "^[A-Z_]+=.*$" .env.example || echo "Environment file format validation"
        
        echo "Environment configuration validated"

  documentation-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check documentation completeness
      run: |
        # Check for required documentation files
        required_files=(
          "README.md"
          "CONTRIBUTING.md"
          "SECURITY.md"
          "CHANGELOG.md"
          "LICENSE"
          "DEPLOYMENT_GUIDE.md"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✓ $file exists"
          else
            echo "✗ $file missing"
            exit 1
          fi
        done
        
        echo "All required documentation files present"
    
    - name: Validate Markdown
      uses: DavidAnson/markdownlint-action@v1
      with:
        files: '**/*.md'
        config: |
          {
            "MD013": false,
            "MD033": false,
            "MD041": false
          }

  notify-status:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, docker-build, security-scan, lint-and-format, deployment-test, documentation-check]
    if: always()
    
    steps:
    - name: Check workflow status
      run: |
        echo "Workflow Status Summary:"
        echo "Backend Tests: ${{ needs.test-backend.result }}"
        echo "Frontend Tests: ${{ needs.test-frontend.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Lint & Format: ${{ needs.lint-and-format.result }}"
        echo "Deployment Test: ${{ needs.deployment-test.result }}"
        echo "Documentation: ${{ needs.documentation-check.result }}"
